name: Main Branch CI

# Triggers
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Allow this Action's jobs access repository contents and packages in the GitHub
# Container Registry (GHCR)
permissions:
  packages: read
  contents: read

jobs:

  #-----------------------------------------------------------------------------
  run-unit-tests:
    # Runner and Container Execution Context
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/michaeldello/stm32-dev:v1.4
      # Run the container as root
      options: --user 0
    
    strategy:
      fail-fast: false
      matrix:
        project: [ blinky, uart ]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure CMake
        run: |
          rm -rf build
          cmake -S . -B build -DUNIT_TESTS=ON -DBUILD_FIRMWARE=OFF -DCMAKE_BUILD_TYPE=Debug

      - name: Build All Unit Tests
        run: cmake --build build --parallel

      - name: Run Unit Tests for ${{ matrix.project }}
        run: |
          ctest --test-dir build \
                --output-on-failure \
                -L "${{ matrix.project }}"
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
      
      - name: Generate JUnit for ${{ matrix.project }}
        if: always()
        run: |
          ctest --test-dir build \
                --output-junit "tests-${{ matrix.project }}.xml" \
                -L "${{ matrix.project }}" || true

      - name: Upload Artifact for (${{ matrix.project }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-${{ matrix.project }}
          path: build/tests-${{ matrix.project }}.xml

  #-----------------------------------------------------------------------------
  check-source-code-quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/michaeldello/stm32-dev:v1.4
      # Run the container as root
      options: --user 0
    env:
      BUILD_DIR: build-quality
    steps:
      - uses: actions/checkout@v4
      - name: Configure Debug Build for Quality Checks
        run: |
          rm -rf "$BUILD_DIR"
          cmake -S . -B "$BUILD_DIR" \
            -DUNIT_TESTS=ON \
            -DBUILD_FIRMWARE=OFF \
            -DCMAKE_BUILD_TYPE=DEBUG \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: Check clang-format
        run: |
          FILES=$(git ls-files \
            'common/**/*.c' 'common/**/*.h' 'projects/**/*.c' 'projects/**/*.h')
          clang-format --dry-run $FILES || echo "Formatting suggestions only (non-blocking)."
      - name: Check clang-tidy
        run: |
          (cd "$BUILD_DIR" && run-clang-tidy -quiet -p .)
      - name: Run cppcheck
        run: |
          mkdir -p quality-reports
          cppcheck --std=c11 --language=c \
                   --enable=warning,style,performance,portability \
                   --inline-suppr --error-exitcode=1 \
                   -I common/include common projects \
                   2> quality-reports/cppcheck.txt || { echo "cppcheck issues"; exit 1; }
      - name: Upload Quality Check Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: quality-reports
  
  #-----------------------------------------------------------------------------
  build-firmware:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        project: [ blinky ]
    container:
      image: ghcr.io/michaeldello/stm32-dev:v1.4
      # Run the container as root
      options: --user 0
    env:
      TOOLCHAIN_FILE: toolchains/arm-gcc.cmake
      BUILD_DIR: build-fw/${{ matrix.project }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Check Toolchain
        run: |
          arm-none-eabi-gcc --version
          test -f "$TOOLCHAIN_FILE" || (echo "Missing $TOOLCHAIN_FILE" && exit 1)
      
      - name: Configure (${{ matrix.project }})
        run: |
          rm -rf "$BUILD_DIR"
          cmake -S . -B "$BUILD_DIR" \
            -DBUILD_FIRMWARE=ON \
            -DUNIT_TESTS=OFF \
            -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build (${{ matrix.project }})
        run: cmake --build "$BUILD_DIR" --parallel

      - name: Collect (${{ matrix.project }}) Artifacts
        run: |
          mkdir -p artifacts/${{ matrix.project }}
          cp -v "$BUILD_DIR"/*.hex artifacts/${{ matrix.project }} 2>/dev/null || true
          cp -v "$BUILD_DIR"/*.bin artifacts/${{ matrix.project }} 2>/dev/null || true
          cp -v "$BUILD_DIR"/projects/${{ matrix.project }}/*.elf artifacts/${{ matrix.project }} 2>/dev/null || true
          cp -v "$BUILD_DIR"/projects/${{ matrix.project }}/*.map artifacts/${{ matrix.project }} 2>/dev/null || true

      - name: Upload Firmware Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.project }}
          path: artifacts/${{ matrix.project }}